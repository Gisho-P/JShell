==== A2 phase I marking ====

Group number: 0303
UTORID usernames of members: bhuiya16, pateld59, pushpa10, songjin8
TA: Akshay Nair <akshay.nair@mail.utoronto.ca>

Total deductions: 3 (Grade: B+)
Instructor bonus: +2
Final deductions: 1 (Grade: A)

============================

Your team's Phase II grade is based on this scale:

    http://www.artsandscience.utoronto.ca/ofr/calendar/rules.htm#grading

The way we graded is as follows: your team starts with an A+. When errors and
problems are found, you will lose 0, 1, 2, or 3 letter steps, depending on the
severity. As an example, if you lost two steps, your team would earn an A-:

     A+ -> A
     A -> A-

==== Product and Sprint backlogs ==== [up to -6]

Mark: 0

Mark reductions: None

Positive feedback:
- Overall very well done PB and SB.

Other comments: None

==== Java Style ==== [up to -6]

Mark: -1

Mark reductions:
- Please split up your java files into packages. (-0.5)
- FileTypes.InvalidName is not a semantic name for an exception class. It should've been its own InvalidNameException class (outside of FileTypes). Also other exceptions also should've been in their own separate file since multiple classes seem to use them (such as InvalidDirectoryPathException) (-0.5)

Positive feedback:
- Good use of automatic style checker.

Other comments: None


==== Design ==== [up to -6]

Mark: -1

Mark reductions:
- Your idea of FileTypes as an abstract class is good, but your usage is not very well done. You use "instanceof" and casting (and catching ClassCastException) far too often and this is a sign of badly designed inheritance. Instead you should have some kind of overridden method which can tell you if the object in question is a File or Directory (e.g. "isDirectory()"). And you should also have improvements to the handling of your code such that you should only have to cast very rarely. For example "parent" directory can be moved into FileTypes. Then any instances of List<File> or List<Directory> can be changed to List<FileTypes>, and then FileTypes should have a "contents" and "children", but each of these would be handled differently in the subclasses. (-0.5)

- I would actually say that you're using Reflection far too often. See below for my comments on how to resolve this the proper way. Alternatively you could also delegate some methods (such as changing directory) to other classes. Overall you really shouldn't have to use Reflection at all in your command classes, at least. (-0.5)

Positive feedback:
- Good unified path handling mechanism (FilePathInterpreter)
- I like the usage of Patterns in many places to handle strings. Very well done.
- Lots of exception classes to handle various cases. Also very well done.

Other comments:
- DirStack should probably not be static but rather an instance variable in MySession.

- You have an ExitProgram class that does nothing. Perhaps you could've moved handling of "exit" command from JShell to ExitProgram, and in ExitProgram you could change a variable in MySession to let MySession know that the user wants to exit.

- You have a Command interface but you don't use it to your full advantage. When using reflection you can actually cast to Command. This lets you use methods in Command without having to use reflection to get the method by name. This is much better design.

- Your Hash table could also be improved. Instead of <String, String> you could instead do <String, Command> and then just store an instance of each of your Commands (gotten from Reflection). This avoids having to use Reflection every time the user types something (and instead Reflection is done only when the program starts) and it also saves you having to create a new instance of each command every time. Your Command classes are really well done and you should use that to your advantage by doing this way of redirection. DisplayManual class could also avoid reflection altogether and take its appropriate Command from this new hash table. Same for other classes such as PopDirectory.

- You could improve your Exceptions by avoiding having to pass a concatenated string into the constructor. This leads to duplicated error messages in various parts of your code which is not good design. This is because you would have to change an error message many times in your code just to change one error message. Instead you should pass in strings into the constructor, ones that would have a tendency to change (such as a file name), then override the appropriate method in the Exception class to put that into your desired error message format.

- Adding onto the previous comment, you should probably have static error messages for commands instead of having them multiple times in various commands. Perhaps create a static error handler class for this. In general your commands are handling way too many exceptions.

==== Javadoc ==== [up to -3]

Mark: -0.5

Mark reductions:
- Sometimes you're missing tags, like you have a @return but no @param, or vice versa (see: Command class, and many equals() methods) (-0.5)

Positive feedback:
- Very consistent otherwise.

==== Testing ==== [up to -6] 

Mark: -0.5

Mark reductions:
- All your test cases use JShell.commandProcessor, but this is not good for testing because it doesn't allow you to test specific methods in your classes. Instead you probably could've created a new instance of the appropriate command class in the @Before. Though you should definitely have some test cases using JShell.commandProcessor, not all of them should be using that. (-0.5)

Positive feedback:
- Lots of test cases. This is good.

Other comments: None

==== Correctness ==== [up to -6]

Mark: 0

Mark reductions: None

Positive feedback:
- Congratulations: you passed all the test cases!

Other comments: None
