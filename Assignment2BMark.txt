==== A2 phase II marking ====

Group number: 0303
UTORID usernames of members: bhuiya16, pateld59, pushpa10, songjin8
TA: Akshay Nair <akshay.nair@mail.utoronto.ca>

Total deductions: 1 (Grade: A)
Ant bonus: +1
Final deductions: 0 (Grade: A+)

============================

Your team's Phase II grade is based on this scale:

    http://www.artsandscience.utoronto.ca/ofr/calendar/rules.htm#grading

The way we graded is as follows: your team starts with an A+. When errors and
problems are found, you will lose 0, 1, 2, or 3 letter steps, depending on the
severity. As an example, if you lost two steps, your team would earn an A-:

     A+ -> A
     A -> A-

==== Product and Sprint backlogs ==== [up to -6]

Mark: 0

Mark reductions: None

Positive feedback:
- Same as 2A

Other comments: None

==== Java Style ==== [not counted in mark]

Mark: 0

Mark reductions:

Positive feedback:
- Good work in following the feedback.

Other comments: 
- Typically the "driver" package should only have JShell (i.e. only one class) in it.


==== Design ==== [not counted in mark]

Mark: 0

Mark reductions: None

Positive feedback:
- Same as 2A
- Well done in following the feedback given in 2A. (This is refreshing to see as most groups did not do this)

Other comments:
- Do not use collections of Object (such as List<Object> in DirStack and in handling of !number). Object does not communicate your intent in any way to someone who is reading your code or is attempting to use it. Java is strictly typed because having types for every argument and variable helps both with error checking and especially with using the code of others. Imagine that Java APIs didn't have any types. Wouldn't it be a nightmare having to look up each API individually, to understand code before being able to use it? Using Object is against the point of Java. In general, casting from Object is something that you should use extremely rarely (e.g. only when you have to, like when using Reflection, where it is completely fine). I understand that other programming languages aren't quite like this (e.g. in C you pretty much are required to cast to and from void in some cases, and Python isn't strongly typed at all) but this is one of the defining factors that make Java a good language. Try to use it to your advantage.

- FileTypes is a lot better now. However I still would've avoided the use of "instanceof" by having an abstract method in FileTypes, perhaps known as "isFile()". Then File.java would return true for that method and Directory would return false. This is much better than always using instanceof. Casting is still fine however since you can't really get around that, but I would try to minimize the usage of this.

- You should really make usage of return types. Right now you have all methods in Command being void return type. This isn't necessarily "wrong" by any means but it doesn't make much sense. I would suggest that, for example, man() returns a string, and the class that calls it would make it the output.

- Did you know that Java 7 allows you to catch multiple Exceptions at once? (e.g. catch (InvalidNameException | InvalidAdditionException e)) Furthermore you can also use try-with-resources which automatically closes resources for you (such as Scanners and file readers). Just a couple tips to help you shorten your code and avoid errors for next time.

- Sometimes you have package-private instance variables that should really be private. As a tip, always encapsulate as much as you can (i.e. make it as private as you can).

==== Javadoc ==== [not counted in mark]

Mark: -1.5

Mark reductions:
- Some classes don't have Javadoc (-0.5)
- Some variables are not commented (-0.5)
- Some methods (especially constructors) don't have Javadoc (-0.5)

Positive feedback:
- Very consistent otherwise.

Other comments:
- Typically the first sentence of a Javadoc should end with a period. You need full sentences (or, at least one full sentence).

==== Testing ==== [up to -6] 

Mark: 0

Mark reductions: None

Other comments:
- Same as 2A, don't use commandProcessor for the majority of test cases.

==== Correctness ==== [up to -6]

Mark: -1

Mark reductions:

Test cases:
  The weighing of test cases are done in the following way:
	70% for Assignment2B test cases (27 test cases are 2B)
	30% for Assignment2A test cases (13 test cases are 2A)
  Every 0.08 deduction in failed test cases amounts to one deduction.

Failed test cases (((0/13 * 0.3) + (3/27 * 0.7)) / 0.08 = -1):

1) Invalid command and truncating history (2B)
	> !2
	> asdasdasdfg
	> history 3
	Expected: It should show the last three commands used with the last command being history 3 and second last command being the invalid command and third last command being “popd”.
	Actual: "!2" is shown instead of its replacement, "popd".

2) Invalid grep file (2B)
	> grep “git[a-z]*” /invalid.txt
	Expected: It should throw an error since the file doesn’t exist.
	Actual: Crashes.

3) Invalid regex (2B)
	> grep git[a-z]* /github.txt
	Expected: It should throw an error since the regex was not enclosed in double quotes.
	Actual: Accepts it.